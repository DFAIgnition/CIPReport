{
  "custom": {},
  "params": {
    "edit": true,
    "site_id": "",
    "system_description": "",
    "system_id": "",
    "system_name": "",
    "type_id": "",
    "type_name": ""
  },
  "permissions": {
    "securityLevels": [
      {
        "children": [],
        "name": "Authenticated"
      }
    ],
    "type": "AllOf"
  },
  "propConfig": {
    "params.edit": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.sample_point_id": {
      "paramDirection": "input",
      "persistent": false
    },
    "params.site_id": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.system_description": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.system_id": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.system_name": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.type_id": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.type_name": {
      "paramDirection": "input",
      "persistent": true
    }
  },
  "props": {
    "defaultSize": {
      "height": 233,
      "width": 880
    }
  },
  "root": {
    "children": [
      {
        "meta": {
          "name": "Icon"
        },
        "position": {
          "height": 95,
          "width": 115,
          "x": 708.5,
          "y": 20.5
        },
        "props": {
          "path": "material/construction"
        },
        "type": "ia.display.icon"
      },
      {
        "meta": {
          "name": "Type_Label"
        },
        "position": {
          "height": 32,
          "width": 140,
          "x": 12,
          "y": 11
        },
        "props": {
          "text": "Type:"
        },
        "type": "ia.display.label"
      },
      {
        "meta": {
          "name": "Type_Dropdown"
        },
        "position": {
          "height": 36,
          "width": 536,
          "x": 161,
          "y": 10
        },
        "propConfig": {
          "props.options": {
            "binding": {
              "config": {
                "enableValueCache": false,
                "queryPath": "CIP_Q/DB_Query/Get_CIP_Type",
                "returnFormat": "json"
              },
              "transforms": [
                {
                  "code": "\t\n\t# Format and sort the names \n\tformatted_names \u003d sorted([{\"value\": item[\"id\"], \"label\": item[\"name\"]} for item in value],key\u003dlambda x: x[\u0027label\u0027].lower())\n\treturn formatted_names\n\t",
                  "type": "script"
                }
              ],
              "type": "query"
            }
          },
          "props.value": {
            "binding": {
              "config": {
                "expression": "{view.params.type_id}"
              },
              "type": "expr"
            }
          }
        },
        "props": {
          "placeholder": {
            "text": "Select System Type..."
          }
        },
        "type": "ia.input.dropdown"
      },
      {
        "meta": {
          "name": "Name_Label"
        },
        "position": {
          "height": 32,
          "width": 140,
          "x": 12,
          "y": 52
        },
        "props": {
          "text": "Name:"
        },
        "type": "ia.display.label"
      },
      {
        "meta": {
          "name": "Name_Entry"
        },
        "position": {
          "height": 36,
          "width": 536,
          "x": 161,
          "y": 52
        },
        "propConfig": {
          "props.text": {
            "binding": {
              "config": {
                "expression": "toStr({view.params.system_name},\"\")"
              },
              "type": "expr"
            }
          }
        },
        "props": {
          "placeholder": "Enter System Name"
        },
        "type": "ia.input.text-field"
      },
      {
        "meta": {
          "name": "Description_Label"
        },
        "position": {
          "height": 32,
          "width": 140,
          "x": 13,
          "y": 93
        },
        "props": {
          "text": "Description:"
        },
        "type": "ia.display.label"
      },
      {
        "meta": {
          "name": "Description_Entry"
        },
        "position": {
          "height": 36,
          "width": 536,
          "x": 162,
          "y": 93
        },
        "propConfig": {
          "props.text": {
            "binding": {
              "config": {
                "expression": "toStr({view.params.system_description},\"\")"
              },
              "type": "expr"
            }
          }
        },
        "props": {
          "placeholder": "Enter System Description"
        },
        "type": "ia.input.text-field"
      },
      {
        "custom": {
          "exists": 0
        },
        "events": {
          "dom": {
            "onClick": {
              "config": {
                "script": "\t\t\n\t# Get all the parameters we need to save\n\tsite_id \t\t\t\u003d self.view.params.site_id\n\ttype_id\t\t\t\t\u003d self.getSibling(\"Type_Dropdown\").props.value\n\tsystem_id \t\t\t\u003d self.view.params.system_id\n\tsystem_name\t\t\t\u003d self.getSibling(\"Name_Entry\").props.text\n\tsystem_description\t\u003d self.getSibling(\"Description_Entry\").props.text\n\tedit\t\t\t\t\u003d self.view.params.edit\n\tupdated_by\t\t\t\u003d self.session.props.auth.user.userName\n\t\n\t# Check if exists\n\tnamedQuery \u003d \"CIP_Q/DB_Scalar/Get_CIP_System\"\n\tparameters \u003d {\n\t\t\u0027site_id\u0027:\t\t\tsite_id, \n\t\t\u0027type_id\u0027:\t\t\ttype_id,\n\t\t\u0027name\u0027:\t\t\t\tsystem_name\n\t}\n\t\n\texists \u003d system.db.runNamedQuery(system.project.getProjectName(), namedQuery, parameters)\n\t\n\tif exists \u003e 0 and edit \u003d\u003d False:\n\t\tCORE_P.Utils.errorPopup(\u0027A system with that name already exists under the selected type and site.\u0027) \n\t\treturn\n\t\t\t\n\ttxId \u003d system.db.beginTransaction(timeout\u003d5000)\n\t\n\ttry:\n\t\n\t\tif edit \u003d\u003d False:\n\t\n\t\t\tnamedQuery \u003d \"CIP_Q/DB_Insert/Insert_CIP_System\"\n\t\t\tparameters \u003d {\n\t\t\t\t\u0027type_id\u0027:\t\t\t\ttype_id, \n\t\t\t\t\u0027site_id\u0027:\t\t\t\tsite_id, \n\t\t\t\t\u0027name\u0027:\t\t\t\t\tsystem_name, \n\t\t\t\t\u0027description\u0027:\t\t \tsystem_description,\n\t\t\t\t\u0027updated_by\u0027:\t\t\tupdated_by\n\t\t\t}\n\t\t\t\n\t\telse:\n\t\t\n\t\t\tnamedQuery \u003d \"CIP_Q/DB_Update/Update_CIP_System\"\n\t\t\tparameters \u003d {\n\t\t\t\t\u0027id\u0027:\t\t\t\t\tsystem_id,\n\t\t\t\t\u0027type_id\u0027:\t\t\t\ttype_id, \n\t\t\t\t\u0027name\u0027:\t\t\t\t\tsystem_name, \n\t\t\t\t\u0027description\u0027:\t\t \tsystem_description,\n\t\t\t\t\u0027updated_by\u0027:\t\t\tupdated_by\n\t\t\t}\n\t\t\t\n\t\taffected_rows \u003d system.db.runNamedQuery(system.project.getProjectName(), namedQuery, parameters,tx\u003dtxId)\n\t\t\n\t\tmessage \u003d  \u0027Added/Edited CIP System:\u0027 + str(parameters)\n\t\t\n\t\t# Audit log\n\t\tCORE_P.Utils.logChanges(self, \u0027AddEditCIPSystem\u0027, message, txId\u003dtxId, site_id\u003dsite_id)\n\t\tsystem.db.commitTransaction(txId)\n\t\n\t\t# Update the table with lines \n\t\tsystem.perspective.sendMessage(\"update_bindings\", payload \u003d {}, scope \u003d \"page\")\n\t\n\t\tCORE_P.Utils.showSuccess(self, \"Saved!\") \n\t\tsystem.perspective.closePopup(\u0027\u0027)\n\t\tsystem.db.closeTransaction(txId)\n\t    \n\texcept:\n\t\tsystem.db.rollbackTransaction(txId)\n\t\tsystem.db.closeTransaction(txId)\n\t\tCORE_P.Utils.errorPopup(\u0027Error adding/editing CIP System:\u0027) #  + str(sys.exc_info())\n"
              },
              "scope": "G",
              "type": "script"
            }
          }
        },
        "meta": {
          "name": "SaveButton"
        },
        "position": {
          "height": 34,
          "width": 250,
          "x": 12,
          "y": 180
        },
        "props": {
          "text": "Save CIP System"
        },
        "type": "ia.input.button"
      },
      {
        "events": {
          "component": {
            "onActionPerformed": {
              "config": {
                "script": "\t\t\n\t# Get all the parameters we need to delete\n\t\n\tsystem_id \t\t\u003d self.view.params.system_id\n\tsite_id\t\t\t\u003d self.view.params.site_id\n\n\ttxId \u003d system.db.beginTransaction(timeout\u003d5000)\n\n\ttry:\n\n\t\tnamedQuery \u003d \"CIP_Q/DB_Delete/Delete_CIP_System\"\n\t\tparameters \u003d {\n\t\t\t\u0027id\u0027:\t\t\tsystem_id\n\t\t}\n\t\t\t\n\n\t\taffected_rows \u003d system.db.runNamedQuery(system.project.getProjectName(), namedQuery, parameters,tx\u003dtxId)\n\t\t\n\t\tmessage \u003d  \u0027Deleted CIP System:\u0027 + str(parameters)\n\t\t\n\t\t# Audit log\n\t\tCORE_P.Utils.logChanges(self, \u0027DeleteCIPSystem\u0027,message,txId\u003dtxId,site_id\u003dsite_id)\n\t\tsystem.db.commitTransaction(txId)\n                        \t\t\t\n\t\t# Update the table with lines \n\t\tsystem.perspective.sendMessage(\"update_bindings\", payload \u003d {}, scope \u003d \"page\")\n\n\t\tCORE_P.Utils.showSuccess(self, \"Deleted!\") \n\t\t\n\t\tself.props.value\u003d0\n\t\tsystem.db.closeTransaction(txId)\n\t\tsystem.perspective.closePopup(\u0027\u0027)\n\n\texcept:\n\t\tsystem.db.rollbackTransaction(txId)\n\t\tsystem.db.closeTransaction(txId)\n\t\tself.props.value\u003d0\n\t\tCORE_P.Utils.errorPopup(\u0027Error deleting CIP System:\u0027) #  + str(sys.exc_info())"
              },
              "scope": "G",
              "type": "script"
            }
          }
        },
        "meta": {
          "name": "DeleteButton"
        },
        "position": {
          "height": 34,
          "width": 127,
          "x": 736.5,
          "y": 180
        },
        "propConfig": {
          "meta.visible": {
            "binding": {
              "config": {
                "path": "view.params.edit"
              },
              "type": "property"
            }
          },
          "props.enabled": {
            "binding": {
              "config": {
                "expression": "{session.props.auth.user.userName}"
              },
              "transforms": [
                {
                  "code": "\treturn CORE_P.User.hasPermission(self, Constants_P.PROJECT[\u0027project_name\u0027], \u0027SITEADMIN\u0027)",
                  "type": "script"
                }
              ],
              "type": "expr"
            }
          }
        },
        "props": {
          "confirm": {
            "enabled": true
          },
          "disabledStyle": {
            "backgroundColor": "#FF8A8A"
          },
          "readyState": {
            "icon": {
              "style": {
                "height": "24px",
                "width": "2rem"
              }
            },
            "text": "Delete"
          },
          "style": {
            "backgroundColor": "#FF0000"
          },
          "writingState": {
            "icon": {
              "path": "material/hourglass_empty",
              "style": {
                "height": "24px",
                "width": "2rem"
              }
            },
            "text": "Deleting..."
          }
        },
        "type": "ia.input.oneshotbutton"
      },
      {
        "events": {
          "dom": {
            "onClick": {
              "config": {
                "script": "\n\tsystem.perspective.closePopup(\u0027\u0027)"
              },
              "scope": "G",
              "type": "script"
            }
          }
        },
        "meta": {
          "name": "CancelButton"
        },
        "position": {
          "height": 34,
          "width": 250,
          "x": 268.5,
          "y": 180
        },
        "props": {
          "primary": false,
          "text": "Cancel"
        },
        "type": "ia.input.button"
      }
    ],
    "meta": {
      "name": "root"
    },
    "position": {
      "x": 87.5,
      "y": -4.5
    },
    "type": "ia.container.coord"
  }
}