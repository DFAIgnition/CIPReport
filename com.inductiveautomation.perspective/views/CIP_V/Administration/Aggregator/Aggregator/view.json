{
  "custom": {},
  "events": {
    "system": {
      "onStartup": {
        "config": {
          "script": "\tself.session.custom.CIPReport.aggregator.process_circuit\u003d0\n\tself.session.custom.CIPReport.aggregator.process_row\u003d0\n\t"
        },
        "scope": "G",
        "type": "script"
      }
    }
  },
  "params": {
    "data": "error"
  },
  "permissions": {
    "securityLevels": [
      {
        "children": [],
        "name": "Authenticated"
      }
    ],
    "type": "AnyOf"
  },
  "propConfig": {
    "params.data": {
      "paramDirection": "input",
      "persistent": true
    }
  },
  "props": {},
  "root": {
    "children": [
      {
        "meta": {
          "name": "SubHeaderEmbedded"
        },
        "position": {
          "basis": "32px",
          "shrink": 0
        },
        "props": {
          "params": {
            "icon": "settings",
            "text": "Manual aggregation of history data"
          },
          "path": "CORE_V/Headers/SubHeader"
        },
        "type": "ia.display.view"
      },
      {
        "meta": {
          "name": "CurrentSite"
        },
        "position": {
          "basis": "0px",
          "display": false,
          "shrink": 0
        },
        "props": {
          "params": {
            "site": null,
            "site_id": null
          },
          "path": "CORE_V/Utils/CurrentSite"
        },
        "type": "ia.display.view"
      },
      {
        "children": [
          {
            "meta": {
              "name": "Label"
            },
            "position": {
              "basis": "50px",
              "grow": 1
            },
            "props": {
              "style": {
                "paddingBottom": 5,
                "paddingLeft": 20,
                "paddingTop": 5
              },
              "text": "Selection Start Time:"
            },
            "type": "ia.display.label"
          },
          {
            "meta": {
              "name": "Start"
            },
            "position": {
              "grow": 1
            },
            "propConfig": {
              "props.value": {
                "binding": {
                  "config": {
                    "expression": "addDays(now(0), -2)"
                  },
                  "type": "expr"
                }
              }
            },
            "props": {
              "formattedValue": "May 20, 2024 1:07 PM",
              "style": {
                "marginRight": 10,
                "paddingBottom": 5,
                "paddingLeft": 5,
                "paddingRight": 5,
                "paddingTop": 5
              }
            },
            "type": "ia.input.date-time-input"
          }
        ],
        "meta": {
          "name": "StartTime"
        },
        "position": {
          "basis": "35px"
        },
        "type": "ia.container.flex"
      },
      {
        "children": [
          {
            "meta": {
              "name": "Label"
            },
            "position": {
              "basis": "50px",
              "grow": 1
            },
            "props": {
              "style": {
                "paddingBottom": 5,
                "paddingLeft": 20,
                "paddingTop": 5
              },
              "text": "Selection End Time:"
            },
            "type": "ia.display.label"
          },
          {
            "meta": {
              "name": "End"
            },
            "position": {
              "grow": 1
            },
            "propConfig": {
              "props.value": {
                "binding": {
                  "config": {
                    "expression": "now(0)"
                  },
                  "type": "expr"
                }
              }
            },
            "props": {
              "formattedValue": "May 22, 2024 1:07 PM",
              "style": {
                "marginRight": 10,
                "paddingBottom": 5,
                "paddingLeft": 5,
                "paddingRight": 5,
                "paddingTop": 5
              }
            },
            "type": "ia.input.date-time-input"
          }
        ],
        "meta": {
          "name": "EndTime"
        },
        "position": {
          "basis": "35px"
        },
        "type": "ia.container.flex"
      },
      {
        "children": [
          {
            "meta": {
              "name": "Label"
            },
            "position": {
              "basis": "50px",
              "grow": 1
            },
            "props": {
              "style": {
                "paddingBottom": 5,
                "paddingLeft": 20,
                "paddingTop": 5
              },
              "text": "Selection System:"
            },
            "type": "ia.display.label"
          },
          {
            "meta": {
              "name": "Dropdown"
            },
            "position": {
              "basis": "256px",
              "grow": 1
            },
            "propConfig": {
              "props.options": {
                "binding": {
                  "config": {
                    "enableValueCache": false,
                    "parameters": {
                      "site_id": "{.../CurrentSite.props.params.site_id}"
                    },
                    "queryPath": "CIP_Q/DB_Query/Get_CIP_System",
                    "returnFormat": "dataset"
                  },
                  "transforms": [
                    {
                      "code": "\t\n\t# Create an empty list to hold our formatted data\n    formatted_data \u003d []\n    \n    # Add an initial option for \u0027All Scales\u0027\n    all_scales_option \u003d {\"value\": 0, \"label\": \"All Systems\"}\n    formatted_data.append(all_scales_option)\n\n    # Iterate through each row in the dataset\n    for row in range(value.getRowCount()):\n        # Extract line_id and line_name from the current row\n        id \u003d value.getValueAt(row, \"id\")\n        name \u003d value.getValueAt(row, \"name\")\n\n        # Create a dictionary with the \u0027value\u0027 and \u0027label\u0027 keys\n        item \u003d {\"value\": id, \"label\": name}\n\n        # Add the dictionary to our list\n        formatted_data.append(item)\n\n    # Return the formatted list\n    return formatted_data",
                      "type": "script"
                    }
                  ],
                  "type": "query"
                }
              },
              "props.value": {
                "onChange": {
                  "enabled": null,
                  "script": "\n\tif currentValue.value\u003d\u003d0:\n\t\tself.parent.parent.getChild(\"LineSelection\").getChild(\"Dropdown\").props.value\u003d0"
                }
              }
            },
            "props": {
              "style": {
                "marginBottom": 5,
                "marginLeft": 80,
                "marginRight": 15,
                "marginTop": 5
              },
              "textAlign": "center",
              "value": 0
            },
            "type": "ia.input.dropdown"
          }
        ],
        "meta": {
          "name": "SystemSelection"
        },
        "position": {
          "basis": "35px"
        },
        "type": "ia.container.flex"
      },
      {
        "children": [
          {
            "meta": {
              "name": "Label"
            },
            "position": {
              "basis": "50px",
              "grow": 1
            },
            "props": {
              "style": {
                "paddingBottom": 5,
                "paddingLeft": 20,
                "paddingTop": 5
              },
              "text": "Selection Line:"
            },
            "type": "ia.display.label"
          },
          {
            "meta": {
              "name": "Dropdown"
            },
            "position": {
              "basis": "256px",
              "grow": 1
            },
            "propConfig": {
              "props.options": {
                "binding": {
                  "config": {
                    "enableValueCache": false,
                    "parameters": {
                      "line_id": "0",
                      "site_id": "{.../CurrentSite.props.params.site_id}",
                      "system_id": "{.../SystemSelection/Dropdown.props.value}"
                    },
                    "queryPath": "CIP_Q/DB_Query/Get_CIP_Line",
                    "returnFormat": "dataset"
                  },
                  "transforms": [
                    {
                      "code": "\t\n\t# Create an empty list to hold our formatted data\n    formatted_data \u003d []\n    \n    # Add an initial option for \u0027All Scales\u0027\n    all_scales_option \u003d {\"value\": 0, \"label\": \"All Lines\"}\n    formatted_data.append(all_scales_option)\n\n    # Iterate through each row in the dataset\n    for row in range(value.getRowCount()):\n        # Extract line_id and line_name from the current row\n        id \u003d value.getValueAt(row, \"id\")\n        name \u003d value.getValueAt(row, \"name\")\n\n        # Create a dictionary with the \u0027value\u0027 and \u0027label\u0027 keys\n        item \u003d {\"value\": id, \"label\": name}\n\n        # Add the dictionary to our list\n        formatted_data.append(item)\n\n    # Return the formatted list\n    return formatted_data",
                      "type": "script"
                    }
                  ],
                  "type": "query"
                }
              },
              "props.value": {
                "onChange": {
                  "enabled": null,
                  "script": "\tif currentValue.value\u003d\u003d0:\n\t\tself.parent.parent.getChild(\"CircuitSelection\").getChild(\"Dropdown\").props.value\u003d0"
                }
              }
            },
            "props": {
              "style": {
                "marginBottom": 5,
                "marginLeft": 80,
                "marginRight": 15,
                "marginTop": 5
              },
              "textAlign": "center",
              "value": 0
            },
            "type": "ia.input.dropdown"
          }
        ],
        "meta": {
          "name": "LineSelection"
        },
        "position": {
          "basis": "35px"
        },
        "propConfig": {
          "position.display": {
            "binding": {
              "config": {
                "expression": "{../SystemSelection/Dropdown.props.value}\u003e0"
              },
              "type": "expr"
            }
          }
        },
        "type": "ia.container.flex"
      },
      {
        "children": [
          {
            "meta": {
              "name": "Label"
            },
            "position": {
              "basis": "50px",
              "grow": 1
            },
            "props": {
              "style": {
                "paddingBottom": 5,
                "paddingLeft": 20,
                "paddingTop": 5
              },
              "text": "Selection Circuit:"
            },
            "type": "ia.display.label"
          },
          {
            "meta": {
              "name": "Dropdown"
            },
            "position": {
              "basis": "256px",
              "grow": 1
            },
            "propConfig": {
              "props.options": {
                "binding": {
                  "config": {
                    "enableValueCache": false,
                    "parameters": {
                      "circuit_id": "0",
                      "line_id": "{.../LineSelection/Dropdown.props.value}",
                      "site_id": "{.../CurrentSite.props.params.site_id}",
                      "system_id": "{.../SystemSelection/Dropdown.props.value}"
                    },
                    "queryPath": "CIP_Q/DB_Query/Get_CIP_Circuit",
                    "returnFormat": "dataset"
                  },
                  "transforms": [
                    {
                      "code": "\t\n\t# Create an empty list to hold our formatted data\n    formatted_data \u003d []\n    \n    # Add an initial option for \u0027All Scales\u0027\n    all_scales_option \u003d {\"value\": 0, \"label\": \"All Circuits\"}\n    formatted_data.append(all_scales_option)\n\n    # Iterate through each row in the dataset\n    for row in range(value.getRowCount()):\n        # Extract line_id and line_name from the current row\n        id \u003d value.getValueAt(row, \"id\")\n        name \u003d value.getValueAt(row, \"name\")+ \u0027 - \u0027 + value.getValueAt(row, \"description\")\n\n        # Create a dictionary with the \u0027value\u0027 and \u0027label\u0027 keys\n        item \u003d {\"value\": id, \"label\": name}\n\n        # Add the dictionary to our list\n        formatted_data.append(item)\n\n    # Return the formatted list\n    return formatted_data",
                      "type": "script"
                    }
                  ],
                  "type": "query"
                }
              }
            },
            "props": {
              "style": {
                "marginBottom": 5,
                "marginLeft": 80,
                "marginRight": 15,
                "marginTop": 5
              },
              "textAlign": "center",
              "value": 0
            },
            "type": "ia.input.dropdown"
          }
        ],
        "meta": {
          "name": "CircuitSelection"
        },
        "position": {
          "basis": "35px"
        },
        "propConfig": {
          "position.display": {
            "binding": {
              "config": {
                "expression": "{../LineSelection/Dropdown.props.value}\u003e0"
              },
              "type": "expr"
            }
          }
        },
        "type": "ia.container.flex"
      },
      {
        "custom": {
          "data": ""
        },
        "meta": {
          "name": "CircuitProgress"
        },
        "position": {
          "basis": "20px",
          "display": false
        },
        "propConfig": {
          "props.value": {
            "binding": {
              "config": {
                "path": "session.custom.CIPReport.aggregator.process_circuit"
              },
              "type": "property"
            }
          }
        },
        "props": {
          "style": {
            "marginTop": 5,
            "paddingLeft": 20,
            "paddingRight": 20
          }
        },
        "type": "ia.display.progress"
      },
      {
        "custom": {
          "data": ""
        },
        "meta": {
          "name": "RowProgress"
        },
        "position": {
          "basis": "20px",
          "display": false
        },
        "propConfig": {
          "props.value": {
            "binding": {
              "config": {
                "path": "session.custom.CIPReport.aggregator.process_row"
              },
              "type": "property"
            }
          }
        },
        "props": {
          "style": {
            "marginTop": 5,
            "paddingLeft": 20,
            "paddingRight": 20
          }
        },
        "type": "ia.display.progress"
      },
      {
        "children": [
          {
            "custom": {
              "help_text": "Utility to manual aggregate history data. This can be used to aggregate data for new setups that already have history data on the server or to pull in data that wasn\u0027t captured for any reason.\n\nSelect start and end date and aggregator will work through the selection to pull in and aggregate history.",
              "help_title": "Aggregation"
            },
            "events": {
              "dom": {
                "onClick": {
                  "config": {
                    "script": "\tCORE_P.Utils.helpPopup(self.custom.help_text, title\u003dself.custom.help_title)"
                  },
                  "scope": "G",
                  "type": "script"
                }
              }
            },
            "meta": {
              "name": "HelpIcon"
            },
            "props": {
              "path": "material/help",
              "style": {
                "cursor": "pointer",
                "marginBottom": 5,
                "marginLeft": 20,
                "marginRight": 10,
                "marginTop": 5
              }
            },
            "type": "ia.display.icon"
          },
          {
            "events": {
              "dom": {
                "onClick": {
                  "config": {
                    "script": "\t\n\tself.session.custom.CIPReport.aggregator.process_circuit \u003d 0\n\tself.session.custom.CIPReport.aggregator.process_row \u003d 0\n\t\n\tself.props.text \u003d \u0027Executing - Please wait\u0027\n\t\n\t# Set parameters\n\ttime_start \u003d\t\t self.parent.parent.getChild(\"StartTime\").getChild(\"Start\").props.value\n\ttime_end \u003d \t\t\tself.parent.parent.getChild(\"EndTime\").getChild(\"End\").props.value\n\tsite_id \u003d \t\t\tself.parent.parent.getChild(\"CurrentSite\").props.params.site_id\n\tsystem_id \u003d \t\tself.parent.parent.getChild(\"SystemSelection\").getChild(\"Dropdown\").props.value\n\tline_id \u003d \t\t\tself.parent.parent.getChild(\"LineSelection\").getChild(\"Dropdown\").props.value\n\tcircuit_id \u003d\t\tself.parent.parent.getChild(\"CircuitSelection\").getChild(\"Dropdown\").props.value\n\n\t\n\t#CIP_P.Aggregator.main_get_all_cip_events(time_start, time_end, site_id,system_id,line_id,circuit_id,False)\n\tsystem.util.invokeAsynchronous(CIP_P.Aggregator.main_get_all_cip_events, args\u003d(time_start, time_end, site_id,system_id,line_id,circuit_id,False))\n\tself.props.text \u003d \u0027Get Events (all)\u0027\n"
                  },
                  "scope": "G",
                  "type": "script"
                }
              }
            },
            "meta": {
              "name": "Button"
            },
            "position": {
              "grow": 1
            },
            "props": {
              "style": {
                "marginBottom": 5,
                "marginRight": 20,
                "marginTop": 5,
                "paddingLeft": 0
              },
              "text": "Get Events (all)"
            },
            "type": "ia.input.button"
          },
          {
            "events": {
              "dom": {
                "onClick": {
                  "config": {
                    "script": "\t\n\tself.session.custom.CIPReport.aggregator.process_circuit \u003d 0\n\tself.session.custom.CIPReport.aggregator.process_row \u003d 0\n\t\n\tself.props.text \u003d \u0027Executing - Please wait\u0027\n\t\n\t# Set parameters\n\ttime_start \u003d\t\t self.parent.parent.getChild(\"StartTime\").getChild(\"Start\").props.value\n\ttime_end \u003d \t\t\tself.parent.parent.getChild(\"EndTime\").getChild(\"End\").props.value\n\tsite_id \u003d \t\t\tself.parent.parent.getChild(\"CurrentSite\").props.params.site_id\n\tsystem_id \u003d \t\tself.parent.parent.getChild(\"SystemSelection\").getChild(\"Dropdown\").props.value\n\tline_id \u003d \t\t\tself.parent.parent.getChild(\"LineSelection\").getChild(\"Dropdown\").props.value\n\tcircuit_id \u003d\t\tself.parent.parent.getChild(\"CircuitSelection\").getChild(\"Dropdown\").props.value\n\n\tsystem.util.invokeAsynchronous(CIP_P.Aggregator.main_get_all_cip_events, args\u003d(time_start, time_end,site_id,system_id,line_id,circuit_id,True))\n\t#CIP_P.Aggregator.main_get_all_cip_events(time_start, time_end, site_id,system_id,line_id,circuit_id,True)\n\t\n\tself.props.text \u003d \u0027Get Events (since last db event)\u0027\n"
                  },
                  "scope": "G",
                  "type": "script"
                }
              }
            },
            "meta": {
              "name": "Button_0"
            },
            "position": {
              "grow": 1
            },
            "props": {
              "style": {
                "marginBottom": 5,
                "marginRight": 20,
                "marginTop": 5,
                "paddingLeft": 0
              },
              "text": "Get Events (since last db event)"
            },
            "type": "ia.input.button"
          }
        ],
        "meta": {
          "name": "Execution"
        },
        "position": {
          "basis": "35px"
        },
        "props": {
          "style": {
            "marginTop": 20
          }
        },
        "type": "ia.container.flex"
      }
    ],
    "meta": {
      "name": "root"
    },
    "props": {
      "direction": "column"
    },
    "type": "ia.container.flex"
  }
}